x-airflow-common: 
  &airflow-common
  build: ./
  image: ${AIRFLOW_IMAGE_NAME:-extend_airflow_e_commerce:latest}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    # Connexions Postgres
    AIRFLOW_CONN_PROD_DB_CONN: '{"conn_type": "postgres", "user": "postgres", "password": "postgres", "host": "postgres-prod", "port": 5432, "schema": "e_commerce_database"}'    
    AIRFLOW_CONN_ANALYTICS_DB_CONN: '{"conn_type": "postgres", "user": "postgres", "password": "postgres", "host": "postgres-etl", "port": 5432, "schema": "ecommerce_metrics"}'
    # Connexion Minio
    AIRFLOW_CONN_MINIO_S3: '{"conn_type": "s3", "extra": {
          "endpoint_url": "http://minio:9000",  "aws_access_key_id": "minioadmin",
          "aws_secret_access_key": "minioadmin",  "verify": false } }'
    AIRFLOW__SCHEDULER__STATSD_ON: 'true'
    AIRFLOW__SCHEDULER__STATSD_HOST: statsd-exporter
    AIRFLOW__SCHEDULER__STATSD_PORT: 8125
    AIRFLOW__SCHEDULER__STATSD_PREFIX: airflow
    AIRFLOW__METRICS__STATSD_MAPPING_FILE: /opt/airflow/statsd_mapping.yml


  volumes:
    - ./dags:/opt/airflow/dags
    - ./plugins:/opt/airflow/plugins
    - ./logs:/opt/airflow/logs
    - ./dump:/opt/airflow/dump
    - ./statsd_mapping.yml:/opt/airflow/statsd_mapping.yml
    - ./airflow.cfg:/opt/airflow/airflow.cfg:ro
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      retries: 10
      start_period: 10s
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    depends_on : 
      data-genrator: 
        condition: service_started
        #condition: service_completed_successfully

  data-genrator: 
    image : data_genrator
    build : ./data_genrator
    depends_on:
      postgres-prod:
        condition: service_healthy
    volumes:
      - ./data_genrator:/opt/airflow/data_genrator

  postgres-etl:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ecommerce_metrics
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 10
      start_period: 100s
    volumes:
      - postgres-etl-db-volume:/var/lib/postgresql/data
      - ./init-analytics.sql:/docker-entrypoint-initdb.d/init-analytics.sql
    depends_on : 
      airflow-webserver: 
        condition: service_started

  postgres-prod:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: e_commerce_database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 10
      start_period: 10s
    ports:
      - "5434:5432"
    volumes:
      - postgres-prod-db-volume:/var/lib/postgresql/data
      - ./init-prod.sql:/docker-entrypoint-initdb.d/init-prod.sql

  airflow-scheduler:
    <<: *airflow-common
    depends_on:
      - airflow-init
    healthcheck:
      test: ["CMD-SHELL", "[ -f /opt/airflow/airflow-scheduler.pid ]"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always
    command: airflow scheduler

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 5
    restart: always

  airflow-init:
    <<: *airflow-common
    command: airflow db init
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_PASSWORD:-airflow}

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ~/minio/data:/data
    command: server /data --console-address ":9001" & mc mb ecommerce-data
    depends_on:
      airflow-webserver:
        condition: service_started

    

  superset:
    build:
      context: ./superset
      dockerfile: dockerfile
    container_name: superset
    environment:
      - ADMIN_USERNAME=admin
      - ADMIN_EMAIL=admin@superset.com
      - ADMIN_PASSWORD=admin
      - LOAD_EXAMPLES=yes
    depends_on:
      - airflow-webserver
    ports:
      - '8088:8088'

  statsd-exporter:
    image: prom/statsd-exporter
    container_name: airflow-statsd-exporter
    command: "--statsd.listen-udp=:8125 --web.listen-address=:9102"
    ports:
        - 9102:9102
        - 8125:8125/udp

  prometheus:
    image: prom/prometheus
    container_name: airflow-prometheus
    ports:
        - 9090:9090
    volumes:
        - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    container_name: airflow-grafana
    environment:
        GF_SECURITY_ADMIN_USER: grafana
        GF_SECURITY_ADMIN_PASSWORD: grafana
        GF_PATHS_PROVISIONING: /grafana/provisioning
    ports:
      - 3000:3000
    volumes:
      - ./grafana/provisioning:/grafana/provisioning

volumes:
  postgres-db-volume:
  minio_data:
  superset_data:
  postgres-etl-db-volume:
  postgres-prod-db-volume:
  grafana-storage: